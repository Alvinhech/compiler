0	CONSTsym	const
1	INTsym	int
2	IDENT	c1
3	BECOMES	=
4	MINUS	-
5	NUMBER	5
6	COMMA	,
7	IDENT	c2
8	BECOMES	=
9	ZERO	0
10	COMMA	,
11	IDENT	c3
12	BECOMES	=
13	NUMBER	6
14	SEMICOLON	;
15	CONSTsym	const
16	CHARsym	char
17	IDENT	c4
18	BECOMES	=
19	CHAR	a
20	COMMA	,
21	IDENT	c5
22	BECOMES	=
23	CHAR	-
24	COMMA	,
25	IDENT	c6
26	BECOMES	=
27	CHAR	*
28	SEMICOLON	;
29	INTsym	int
30	IDENT	a1
31	COMMA	,
32	IDENT	a2
33	COMMA	,
34	IDENT	a
35	COMMA	,
36	IDENT	f
37	Lbra	[
38	NUMBER	5
39	Rbra	]
40	SEMICOLON	;
41	CHARsym	char
42	IDENT	d1
43	COMMA	,
44	IDENT	d2
45	COMMA	,
46	IDENT	d
47	COMMA	,
48	IDENT	g
49	Lbra	[
50	NUMBER	6
51	Rbra	]
52	SEMICOLON	;
53	INTsym	int
54	IDENT	f1
55	Lpar	(
56	INTsym	int
57	IDENT	a
58	COMMA	,
59	CHARsym	char
60	IDENT	b
61	Rpar	)
62	Lbrc	{
63	RETURNsym	return
64	Lpar	(
65	NUMBER	1
66	PLUS	+
67	IDENT	a
68	Rpar	)
69	SEMICOLON	;
70	Rbrc	}
71	CHARsym	char
72	IDENT	f2
73	Lpar	(
74	INTsym	int
75	IDENT	a
76	COMMA	,
77	CHARsym	char
78	IDENT	b
79	Rpar	)
80	Lbrc	{
81	INTsym	int
82	IDENT	i
83	COMMA	,
84	IDENT	j
85	COMMA	,
86	IDENT	k
87	SEMICOLON	;
88	CHARsym	char
89	IDENT	c
90	COMMA	,
91	IDENT	d
92	SEMICOLON	;
93	IDENT	i
94	BECOMES	=
95	PLUS	+
96	ZERO	0
97	SEMICOLON	;
98	IDENT	j
99	BECOMES	=
100	MINUS	-
101	NUMBER	12
102	SEMICOLON	;
103	IDENT	k
104	BECOMES	=
105	PLUS	+
106	NUMBER	320
107	SEMICOLON	;
108	IDENT	a
109	BECOMES	=
110	CHAR	-
111	SEMICOLON	;
112	IDENT	b
113	BECOMES	=
114	CHAR	2
115	SEMICOLON	;
116	IDENT	c
117	BECOMES	=
118	CHAR	/
119	SEMICOLON	;
120	IDENT	d
121	BECOMES	=
122	CHAR	_
123	SEMICOLON	;
124	RETURNsym	return
125	Lpar	(
126	CHAR	a
127	Rpar	)
128	SEMICOLON	;
129	Rbrc	}
130	INTsym	int
131	IDENT	recursion
132	Lpar	(
133	INTsym	int
134	IDENT	i
135	Rpar	)
136	Lbrc	{
137	IFsym	if
138	Lpar	(
139	IDENT	i
140	EQL	==
141	NUMBER	1
142	Rpar	)
143	RETURNsym	return
144	Lpar	(
145	NUMBER	1
146	Rpar	)
147	SEMICOLON	;
148	ELSEsym	else
149	RETURNsym	return
150	Lpar	(
151	IDENT	i
152	PLUS	+
153	IDENT	recursion
154	Lpar	(
155	IDENT	i
156	MINUS	-
157	NUMBER	1
158	Rpar	)
159	Rpar	)
160	SEMICOLON	;
161	Rbrc	}
162	VOIDsym	void
163	IDENT	f3
164	Lpar	(
165	Rpar	)
166	Lbrc	{
167	INTsym	int
168	IDENT	i
169	COMMA	,
170	IDENT	j
171	COMMA	,
172	IDENT	k
173	COMMA	,
174	IDENT	m
175	COMMA	,
176	IDENT	s
177	Lbra	[
178	NUMBER	2
179	Rbra	]
180	SEMICOLON	;
181	CHARsym	char
182	IDENT	a
183	COMMA	,
184	IDENT	d
185	Lbra	[
186	NUMBER	2
187	Rbra	]
188	SEMICOLON	;
189	IDENT	s
190	Lbra	[
191	ZERO	0
192	Rbra	]
193	BECOMES	=
194	ZERO	0
195	SEMICOLON	;
196	SEMICOLON	;
197	IDENT	s
198	Lbra	[
199	NUMBER	1
200	Rbra	]
201	BECOMES	=
202	IDENT	s
203	Lbra	[
204	ZERO	0
205	Rbra	]
206	PLUS	+
207	NUMBER	5
208	SEMICOLON	;
209	IDENT	d
210	Lbra	[
211	ZERO	0
212	Rbra	]
213	BECOMES	=
214	CHAR	1
215	SEMICOLON	;
216	IDENT	d
217	Lbra	[
218	NUMBER	1
219	Rbra	]
220	BECOMES	=
221	CHAR	2
222	SEMICOLON	;
223	IDENT	i
224	BECOMES	=
225	NUMBER	1
226	SEMICOLON	;
227	IDENT	j
228	BECOMES	=
229	PLUS	+
230	PLUS	+
231	NUMBER	2
232	SEMICOLON	;
233	IDENT	k
234	BECOMES	=
235	PLUS	+
236	MINUS	-
237	NUMBER	3
238	SEMICOLON	;
239	IDENT	a
240	BECOMES	=
241	IDENT	d
242	Lbra	[
243	NUMBER	1
244	Rbra	]
245	SEMICOLON	;
246	IDENT	m
247	BECOMES	=
248	MINUS	-
249	Lpar	(
250	MINUS	-
251	Lpar	(
252	Lpar	(
253	IDENT	i
254	PLUS	+
255	IDENT	j
256	Rpar	)
257	MUL	*
258	Lpar	(
259	IDENT	k
260	MINUS	-
261	IDENT	j
262	Rpar	)
263	MINUS	-
264	Lpar	(
265	IDENT	s
266	Lbra	[
267	ZERO	0
268	Rbra	]
269	MINUS	-
270	IDENT	s
271	Lbra	[
272	NUMBER	1
273	Rbra	]
274	Rpar	)
275	Rpar	)
276	DIV	/
277	Lpar	(
278	Lpar	(
279	IDENT	d
280	Lbra	[
281	ZERO	0
282	Rbra	]
283	PLUS	+
284	IDENT	j
285	Rpar	)
286	PLUS	+
287	IDENT	a
288	Rpar	)
289	Rpar	)
290	MUL	*
291	IDENT	i
292	MINUS	-
293	IDENT	a
294	DIV	/
295	MINUS	-
296	NUMBER	3
297	SEMICOLON	;
298	PRINTFsym	printf
299	Lpar	(
300	IDENT	m
301	Rpar	)
302	SEMICOLON	;
303	IDENT	k
304	BECOMES	=
305	IDENT	f1
306	Lpar	(
307	IDENT	i
308	COMMA	,
309	IDENT	a
310	Rpar	)
311	SEMICOLON	;
312	Rbrc	}
313	VOIDsym	void
314	MAINsym	main
315	Lpar	(
316	Rpar	)
317	Lbrc	{
318	CONSTsym	const
319	INTsym	int
320	IDENT	p
321	BECOMES	=
322	NUMBER	1
323	SEMICOLON	;
324	CONSTsym	const
325	CHARsym	char
326	IDENT	c0
327	BECOMES	=
328	CHAR	c
329	SEMICOLON	;
330	INTsym	int
331	IDENT	i
332	COMMA	,
333	IDENT	j
334	COMMA	,
335	IDENT	k
336	Lbra	[
337	NUMBER	5
338	Rbra	]
339	SEMICOLON	;
340	CHARsym	char
341	IDENT	a
342	SEMICOLON	;
343	SCANFsym	scanf
344	Lpar	(
345	IDENT	i
346	COMMA	,
347	IDENT	j
348	Rpar	)
349	SEMICOLON	;
350	IDENT	a
351	BECOMES	=
352	CHAR	a
353	SEMICOLON	;
354	IFsym	if
355	Lpar	(
356	IDENT	i
357	EQL	==
358	ZERO	0
359	Rpar	)
360	PRINTFsym	printf
361	Lpar	(
362	STRING	i=0
363	Rpar	)
364	SEMICOLON	;
365	ELSEsym	else
366	PRINTFsym	printf
367	Lpar	(
368	STRING	i!=0
369	Rpar	)
370	SEMICOLON	;
371	IFsym	if
372	Lpar	(
373	IDENT	j
374	Rpar	)
375	PRINTFsym	printf
376	Lpar	(
377	STRING	j!=0
378	Rpar	)
379	SEMICOLON	;
380	IDENT	i
381	BECOMES	=
382	NUMBER	2
383	SEMICOLON	;
384	IDENT	j
385	BECOMES	=
386	ZERO	0
387	SEMICOLON	;
388	DOsym	do
389	Lbrc	{
390	IDENT	i
391	BECOMES	=
392	IDENT	i
393	MINUS	-
394	NUMBER	1
395	SEMICOLON	;
396	IDENT	k
397	Lbra	[
398	IDENT	j
399	Rbra	]
400	BECOMES	=
401	IDENT	i
402	SEMICOLON	;
403	IDENT	j
404	BECOMES	=
405	IDENT	j
406	PLUS	+
407	NUMBER	1
408	SEMICOLON	;
409	Rbrc	}
410	WHILEsym	while
411	Lpar	(
412	IDENT	i
413	GT	>
414	ZERO	0
415	Rpar	)
416	SCANFsym	scanf
417	Lpar	(
418	IDENT	j
419	Rpar	)
420	SEMICOLON	;
421	FORsym	for
422	Lpar	(
423	IDENT	i
424	BECOMES	=
425	ZERO	0
426	SEMICOLON	;
427	IDENT	i
428	LESS	<
429	IDENT	j
430	SEMICOLON	;
431	IDENT	i
432	BECOMES	=
433	IDENT	i
434	PLUS	+
435	NUMBER	1
436	Rpar	)
437	Lbrc	{
438	PRINTFsym	printf
439	Lpar	(
440	IDENT	i
441	PLUS	+
442	IDENT	j
443	Rpar	)
444	SEMICOLON	;
445	Rbrc	}
446	IDENT	i
447	BECOMES	=
448	IDENT	f1
449	Lpar	(
450	IDENT	j
451	PLUS	+
452	IDENT	i
453	COMMA	,
454	CHAR	a
455	Rpar	)
456	SEMICOLON	;
457	PRINTFsym	printf
458	Lpar	(
459	IDENT	i
460	Rpar	)
461	SEMICOLON	;
462	IDENT	a
463	BECOMES	=
464	IDENT	f2
465	Lpar	(
466	IDENT	i
467	COMMA	,
468	IDENT	c0
469	Rpar	)
470	SEMICOLON	;
471	PRINTFsym	printf
472	Lpar	(
473	IDENT	a
474	Rpar	)
475	SEMICOLON	;
476	IDENT	f3
477	Lpar	(
478	Rpar	)
479	SEMICOLON	;
480	IDENT	i
481	BECOMES	=
482	IDENT	recursion
483	Lpar	(
484	NUMBER	1
485	Rpar	)
486	SEMICOLON	;
487	PRINTFsym	printf
488	Lpar	(
489	IDENT	i
490	Rpar	)
491	SEMICOLON	;
492	IDENT	i
493	BECOMES	=
494	IDENT	recursion
495	Lpar	(
496	NUMBER	3
497	Rpar	)
498	SEMICOLON	;
499	PRINTFsym	printf
500	Lpar	(
501	IDENT	i
502	Rpar	)
503	SEMICOLON	;
504	RETURNsym	return
505	SEMICOLON	;
506	Rbrc	}
507	EOF	
