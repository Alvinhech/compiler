0	CHARsym	char
1	IDENT	str
2	Lbra	[
3	NUMBER	10
4	Rbra	]
5	SEMICOLON	;
6	INTsym	int
7	IDENT	Fib
8	Lpar	(
9	INTsym	int
10	IDENT	n
11	Rpar	)
12	Lbrc	{
13	IFsym	if
14	Lpar	(
15	IDENT	n
16	EQL	==
17	ZERO	0
18	Rpar	)
19	RETURNsym	return
20	Lpar	(
21	NUMBER	1
22	Rpar	)
23	SEMICOLON	;
24	IFsym	if
25	Lpar	(
26	IDENT	n
27	EQL	==
28	NUMBER	1
29	Rpar	)
30	RETURNsym	return
31	Lpar	(
32	NUMBER	1
33	Rpar	)
34	SEMICOLON	;
35	ELSEsym	else
36	RETURNsym	return
37	Lpar	(
38	IDENT	Fib
39	Lpar	(
40	IDENT	n
41	MINUS	-
42	NUMBER	2
43	Rpar	)
44	PLUS	+
45	IDENT	Fib
46	Lpar	(
47	IDENT	n
48	MINUS	-
49	NUMBER	1
50	Rpar	)
51	Rpar	)
52	SEMICOLON	;
53	Rbrc	}
54	VOIDsym	void
55	MAINsym	main
56	Lpar	(
57	Rpar	)
58	Lbrc	{
59	INTsym	int
60	IDENT	t
61	COMMA	,
62	IDENT	count
63	SEMICOLON	;
64	CHARsym	char
65	IDENT	s
66	SEMICOLON	;
67	FORsym	for
68	Lpar	(
69	IDENT	count
70	BECOMES	=
71	ZERO	0
72	SEMICOLON	;
73	IDENT	count
74	LESS	<
75	NUMBER	10
76	SEMICOLON	;
77	IDENT	count
78	BECOMES	=
79	IDENT	count
80	PLUS	+
81	NUMBER	1
82	Rpar	)
83	Lbrc	{
84	SCANFsym	scanf
85	Lpar	(
86	IDENT	s
87	Rpar	)
88	SEMICOLON	;
89	IDENT	str
90	Lbra	[
91	IDENT	count
92	Rbra	]
93	BECOMES	=
94	IDENT	s
95	SEMICOLON	;
96	Rbrc	}
97	IDENT	count
98	BECOMES	=
99	ZERO	0
100	SEMICOLON	;
101	DOsym	do
102	Lbrc	{
103	PRINTFsym	printf
104	Lpar	(
105	IDENT	str
106	Lbra	[
107	IDENT	count
108	Rbra	]
109	Rpar	)
110	SEMICOLON	;
111	IDENT	count
112	BECOMES	=
113	IDENT	count
114	PLUS	+
115	NUMBER	1
116	SEMICOLON	;
117	Rbrc	}
118	WHILEsym	while
119	Lpar	(
120	IDENT	count
121	LESS	<
122	NUMBER	10
123	Rpar	)
124	PRINTFsym	printf
125	Lpar	(
126	STRING	Input the Fibonacci number you want to know:
127	Rpar	)
128	SEMICOLON	;
129	SCANFsym	scanf
130	Lpar	(
131	IDENT	t
132	Rpar	)
133	SEMICOLON	;
134	IDENT	t
135	BECOMES	=
136	IDENT	Fib
137	Lpar	(
138	IDENT	t
139	Rpar	)
140	SEMICOLON	;
141	PRINTFsym	printf
142	Lpar	(
143	STRING	Fib number is:
144	COMMA	,
145	IDENT	t
146	Rpar	)
147	SEMICOLON	;
148	RETURNsym	return
149	SEMICOLON	;
150	RETURNsym	return
151	SEMICOLON	;
152	Rbrc	}
153	EOF	
